# Default values for radar-gateway.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Number of radar-gateway replicas to deploy
replicaCount: 2

image:
  # -- radar-gateway image repository
  repository: radarbase/radar-gateway
  # -- radar-gateway image tag (immutable tags are recommended)
  # Overrides the image tag whose default is the chart appVersion.
  tag: 0.7.1
  # -- radar-gateway image pull policy
  pullPolicy: IfNotPresent

# -- Docker registry secret names as an array
imagePullSecrets: []

# -- String to partially override radar-gateway.fullname template with a string (will prepend the release name)
nameOverride: ""
# -- String to fully override radar-gateway.fullname template with a string
fullnameOverride: ""

# -- Configure radar-gateway pods' Security Context
podSecurityContext: {}
  # fsGroup: 2000

# -- Configure radar-gateway containers' Security Context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Kubernetes Service type
  type: ClusterIP
  # -- radar-gateway port
  port: 8080

ingress:
  # -- Enable ingress controller resource
  enabled: true
  # -- Annotations that define default ingress class, certificate issuer and deny access to sensitive URLs
  # @default -- check values.yaml
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Content-Encoding
    nginx.ingress.kubernetes.io/rewrite-target: /kafka/$1
    nginx.ingress.kubernetes.io/proxy-body-size: 24m
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    # Prevents XSS attacks on Grizzly (see https://github.com/Graylog2/graylog2-server/issues/3171)
    nginx.ingress.kubernetes.io/configuration-snippet: rewrite ^ $request_uri;
  # -- Path within the url structure
  path: "/kafka/?(.*)"
  # -- Ingress Path type
  pathType: ImplementationSpecific
  # -- IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  ingressClassName: nginx
  # -- Hosts to accept requests from
  hosts:
    - localhost
  tls:
    # -- Name of the secret that contains TLS certificates
    secretName: radar-base-tls-radar-gateway

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi

  # -- CPU/Memory resource requests
  requests:
    cpu: 100m
    memory: 128Mi

# -- Node labels for pod assignment
nodeSelector: {}

# -- Toleration labels for pod assignment
tolerations: []

# -- Affinity labels for pod assignment
affinity: {}

# -- Extra environment variables
extraEnvVars: []
#  - name: BEARER_AUTH
#    value: true

# -- Custom livenessProbe that overrides the default one
customLivenessProbe: {}

livenessProbe:
  # -- Enable livenessProbe
  enabled: true
  # -- Initial delay seconds for livenessProbe
  initialDelaySeconds: 10
  # -- Period seconds for livenessProbe
  periodSeconds: 30
  # -- Timeout seconds for livenessProbe
  timeoutSeconds: 5
  # -- Success threshold for livenessProbe
  successThreshold: 1
  # -- Failure threshold for livenessProbe
  failureThreshold: 3

# -- Custom readinessProbe that overrides the default one
customReadinessProbe: {}

readinessProbe:
  # -- Enable readinessProbe
  enabled: true
  # -- Initial delay seconds for readinessProbe
  initialDelaySeconds: 10
  # -- Period seconds for readinessProbe
  periodSeconds: 30
  # -- Timeout seconds for readinessProbe
  timeoutSeconds: 5
  # -- Success threshold for readinessProbe
  successThreshold: 1
  # -- Failure threshold for readinessProbe
  failureThreshold: 3

# -- Network policy defines who can access this application and who this applications has access to
# @default -- check `values.yaml`
networkpolicy:
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: 'cp-kafka'
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: 'cp-schema-registry'
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: 'management-portal'
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
      - port: 53
        protocol: UDP
      - port: 53
        protocol: TCP

serviceMonitor:
  # -- Enable metrics to be collected via Prometheus-operator
  enabled: true

# -- URL of the management portal application
managementportal_url: http://management-portal:8080/managementportal
# -- Schema Registry URL
schemaRegistry: http://cp-schema-registry:8081
# -- Not used. To be confirmed
max_requests: 1000
# -- Kafka broker URLs
bootstrapServers: cp-kafka-headless:9092
# -- set to true, if sources in access token should be validated
checkSourceId: true
# -- Additional Kafka Admin Client settings as key value pairs. Read from https://kafka.apache.org/documentation/#adminclientconfigs.
adminProperties: {}
# -- Kafka producer properties as key value pairs. Read from https://kafka.apache.org/documentation/#producerconfigs.
producerProperties:
  compression.type: lz4
# -- Additional Kafka serialization settings, used in KafkaAvroSerializer. Read from [io.confluent.kafka.serializers.AbstractKafkaSchemaSerDeConfig].
serializationProperties: {}

# -- Additional gateway server properties
serverProperties:
  # -- Maximum request size, also after decompression.
  maxRequestSize: 25165824

cc:
  # -- set to true, if requests should be forwarded to Confluent Cloud based brokers.
  enabled: false
  # -- Confluent Cloud cluster API key
  apiKey: ccApikey
  # -- Confluent Cloud cluster API secret
  apiSecret: ccApiSecret
  # -- Confluent Cloud schema registry API key
  schemaRegistryApiKey: srApiKey
  # -- Confluent Cloud schema registry API secret
  schemaRegistryApiSecret: srApiSecret
